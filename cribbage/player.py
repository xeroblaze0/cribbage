"""Agents that interact with the CribbageGame."""
import random
from abc import ABCMeta, abstractmethod
from cribbage import scoring
from cribbage.playingcards import Deck, Card
import itertools
from itertools import combinations, permutations

import numpy as np
import matplotlib.pyplot as plt

class Player(metaclass=ABCMeta):
    """Abstract Base Class"""

    def __init__(self, name):
        self.name = name

    def __str__(self):
        return self.name

    def __repr__(self):
        return str(self)

    @abstractmethod
    def select_crib_cards(self, hand):
        """Select cards to place in crib.

        :param hand: list containing the cards in the player's hand
        :return: list of cards to place in crib
        """
        raise NotImplementedError

    @abstractmethod
    def select_card_to_play(self, hand, table, crib):
        """Select next card to play.

        :param hand: list containing the cards in the player's hand
        :param table: list of all cards that have been played so far during the current round (by all players)
        :param crib: list of cards that the player has placed in the crib
        :return: card to play
        """
        raise NotImplementedError


class RandomPlayer(Player):
    """A player that makes random decisions."""

    def select_crib_cards(self, hand):
        return random.sample(hand, 2)

    def select_card_to_play(self, hand, table, crib):
        return random.choice(hand)


class CPU_Player(Player):

    def score_hand(self, hand, s_card, is_crib):
        """Score a hand at the end of a round.

        :param cards: Cards in a single player's hand.
        :return: Points earned by player.
        """
        score = 0
        score_scenarios = [scoring.NinHand(hand, s_card),
                           scoring.HasPairTripleQuad_InHand(hand, s_card), scoring.HasStraight_InHand(hand, s_card), scoring.HasFlush(hand, s_card, is_crib)]
        for scenario in score_scenarios:
            s, desc = scenario.check()
            score += s
            # print("[EOR SCORING] " + desc) if desc else None
        
        return score
    
    def deck_without_hand(self, hand):
         # imagine a deck
        deck=Deck()
        
        # find your cards in the deck
        hand_index=[]
        for i in range(len(deck.cards)):
            for ii in range(len(hand)):
                # print(i, ii)
                if deck.cards[i].rank == hand[ii].rank and deck.cards[i].suit == hand[ii].suit:
                    # print(i, deck.cards[i], hand[ii])
                    hand_index.append(i)

        # remove and/or clone your hand from the deck
        # clone=[]
        for x in range(len(hand_index)):
            # clone.append(deck.cards.pop(hand_index[x]-x))
            deck.cards.pop(hand_index[x]-x)

        return deck

    def find_expected_crib_score(self, discard, is_crib):

        hessel_dealer = {
            (1, 1): 5.26, (1, 2): 4.18, (1, 3): 4.47, (1, 4): 5.45, (1, 5): 5.48, (1, 6): 3.80, (1, 7): 3.73, (1, 8): 3.70, (1, 9): 3.33, (1, 10): 3.37, (1, 11): 3.65, (1, 12): 3.39, (1, 13): 3.42,    
            (2, 1): 4.18, (2, 2): 5.67, (2, 3): 6.97, (2, 4): 4.41, (2, 5): 5.44, (2, 6): 3.87, (2, 7): 3.81, (2, 8): 3.58, (2, 9): 3.63, (2, 10): 3.51, (2, 11): 3.79, (2, 12): 3.52, (2, 13): 3.55,    
            (3, 1): 4.47, (3, 2): 6.97, (3, 3): 5.90, (3, 4): 4.88, (3, 5): 6.01, (3, 6): 3.72, (3, 7): 3.67, (3, 8): 3.84, (3, 9): 3.66, (3, 10): 3.61, (3, 11): 3.88, (3, 12): 3.62, (3, 13): 3.66,    
            (4, 1): 5.45, (4, 2): 4.51, (4, 3): 4.88, (4, 4): 5.65, (4, 5): 6.54, (4, 6): 3.87, (4, 7): 3.74, (4, 8): 3.84, (4, 9): 3.69, (4, 10): 3.62, (4, 11): 3.89, (4, 12): 3.63, (4, 13): 3.67,    
            (5, 1): 5.48, (5, 2): 5.44, (5, 3): 6.01, (5, 4): 6.54, (5, 5): 8.95, (5, 6): 6.65, (5, 7): 6.04, (5, 8): 5.49, (5, 9): 5.47, (5, 10): 6.68, (5, 11): 7.04, (5, 12): 6.71, (5, 13): 6.70,    
            (6, 1): 3.80, (6, 2): 3.87, (6, 3): 3.72, (6, 4): 3.87, (6, 5): 6.65, (6, 6): 5.74, (6, 7): 4.94, (6, 8): 4.70, (6, 9): 5.11, (6, 10): 3.15, (6, 11): 3.40, (6, 12): 3.08, (6, 13): 3.13,    
            (7, 1): 3.73, (7, 2): 3.81, (7, 3): 3.67, (7, 4): 3.74, (7, 5): 6.04, (7, 6): 4.94, (7, 7): 5.98, (7, 8): 6.58, (7, 9): 4.06, (7, 10): 3.10, (7, 11): 3.43, (7, 12): 3.17, (7, 13): 3.21,    
            (8, 1): 3.70, (8, 2): 3.58, (8, 3): 3.84, (8, 4): 3.84, (8, 5): 5.49, (8, 6): 4.70, (8, 7): 6.58, (8, 8): 5.42, (8, 9): 4.74, (8, 10): 3.86, (8, 11): 3.39, (8, 12): 3.16, (8, 13): 3.20,    
            (9, 1): 3.33, (9, 2): 3.63, (9, 3): 3.66, (9, 4): 3.69, (9, 5): 5.47, (9, 6): 5.11, (9, 7): 4.06, (9, 8): 4.74, (9, 9): 5.09, (9, 10): 4.27, (9, 11): 3.98, (9, 12): 2.97, (9, 13): 3.05,    
            (10, 1): 3.37, (10, 2): 3.51, (10, 3): 3.61, (10, 4): 3.62, (10, 5): 6.68, (10, 6): 3.15, (10, 7): 3.10, (10, 8): 3.86, (10, 9): 4.27, (10, 10): 4.73, (10, 11): 4.64, (10, 12): 3.36, (10, 13): 2.86,    
            (11, 1): 3.65, (11, 2): 3.79, (11, 3): 3.88, (11, 4): 3.89, (11, 5): 7.04, (11, 6): 3.40, (11, 7): 3.43, (11, 8): 3.39, (11, 9): 3.98, (11, 10): 4.64, (11, 11): 5.37, (11, 12): 4.90, (11, 13): 4.07,    
            (12, 1): 3.39, (12, 2): 3.52, (12, 3): 3.62, (12, 4): 3.63, (12, 5): 6.71, (12, 6): 3.08, (12, 7): 3.17, (12, 8): 3.16, (12, 9): 2.97, (12, 10): 3.36, (12, 11): 4.90, (12, 12): 4.66, (12, 13): 3.50,    
            (13, 1): 3.42, (13, 2): 3.55, (13, 3): 3.66, (13, 4): 3.67, (13, 5): 6.70, (13, 6): 3.13, (13, 7): 3.21, (13, 8): 3.20, (13, 9): 3.05, (13, 10): 2.86, (13, 11): 4.07, (13, 12): 3.50, (13, 13): 4.60
        }
        
        hessel_pone = {
            (1, 1): 6.07,(1, 2): 5.07,(1, 3): 5.17,(1, 4): 5.74,(1, 5): 6.06,(1, 6): 4.93,(1, 7): 4.95,(1, 8): 4.92,(1, 9): 4.66,(1,10): 4.46,(1,11): 4.72,(1,12): 4.41,(1,13): 4.34,
            (2, 1): 5.07,(2, 2): 6.43,(2, 3): 7.34,(2, 4): 5.44,(2, 5): 6.17,(2, 6): 5.13,(2, 7): 5.12,(2, 8): 5.03,(2, 9): 4.82,(2,10): 4.64,(2,11): 4.91,(2,12): 4.60,(2,13): 4.53,
            (3, 1): 5.17,(3, 2): 7.34,(3, 3): 6.78,(3, 4): 6.10,(3, 5): 6.85,(3, 6): 4.92,(3, 7): 5.16,(3, 8): 5.08,(3, 9): 4.82,(3,10): 4.70,(3,11): 4.97,(3,12): 4.66,(3,13): 4.59,
            (4, 1): 5.74,(4, 2): 5.44,(4, 3): 6.10,(4, 4): 6.59,(4, 5): 7.46,(4, 6): 5.47,(4, 7): 4.91,(4, 8): 5.02,(4, 9): 4.75,(4,10): 4.55,(4,11): 4.80,(4,12): 4.49,(4,13): 4.43,
            (5, 1): 6.06,(5, 2): 6.17,(5, 3): 6.85,(5, 4): 7.46,(5, 5): 9.39,(5, 6): 7.66,(5, 7): 7.08,(5, 8): 6.36,(5, 9): 6.22,(5,10): 7.46,(5,11): 7.75,(5,12): 7.42,(5,13): 7.31,
            (6, 1): 4.93,(6, 2): 5.13,(6, 3): 4.92,(6, 4): 5.47,(6, 5): 7.66,(6, 6): 7.17,(6, 7): 6.64,(6, 8): 6.05,(6, 9): 6.31,(6,10): 4.41,(6,11): 4.61,(6,12): 4.29,(6,13): 4.25,
            (7, 1): 4.07,(7, 2): 5.07,(7, 3): 5.17,(7, 4): 4.74,(7, 5): 7.06,(7, 6): 6.93,(7, 7): 7.95,(7, 8): 7.92,(7, 9): 5.66,(7,10): 4.46,(7,11): 4.72,(7,12): 4.41,(7,13): 4.34,
            (8, 1): 4.92,(8, 2): 5.03,(8, 3): 5.08,(8, 4): 5.02,(8, 5): 6.36,(8, 6): 6.05,(8, 7): 7.88,(8, 8): 6.76,(8, 9): 5.97,(8,10): 5.02,(8,11): 4.65,(8,12): 4.38,(8,13): 4.31,
            (9, 1): 4.66,(9, 2): 4.82,(9, 3): 4.82,(9, 4): 4.75,(9, 5): 6.22,(9, 6): 6.31,(9, 7): 5.46,(9, 8): 5.97,(9, 9): 6.44,(9,10): 5.52,(9,11): 4.98,(9,12): 4.14,(9,13): 4.13,
            (10, 1): 4.46,(10, 2): 4.64,(10, 3): 4.70,(10, 4): 4.55,(10, 5): 7.46,(10, 6): 4.41,(10, 7): 4.44,(10, 8): 5.02,(10, 9): 5.52,(10,10): 6.11,(10,11): 5.60,(10,12): 4.65,(10,13): 3.99,
            (11, 1): 4.72,(11, 2): 4.91,(11, 3): 4.97,(11, 4): 4.80,(11, 5): 7.75,(11, 6): 4.61,(11, 7): 4.73,(11, 8): 4.65,(11, 9): 4.98,(11,10): 5.60,(11,11): 6.56,(11,12): 5.55,(11,13): 4.89,
            (12, 1): 4.41,(12, 2): 4.60,(12, 3): 4.66,(12, 4): 4.49,(12, 5): 7.42,(12, 6): 4.29,(12, 7): 4.44,(12, 8): 4.38,(12, 9): 4.14,(12,10): 4.65,(12,11): 5.55,(12,12): 5.89,(12,13): 4.56,
            (13, 1): 4.34,(13, 2): 4.53,(13, 3): 4.59,(13, 4): 4.43,(13, 5): 7.31,(13, 6): 4.25,(13, 7): 4.38,(13, 8): 4.31,(13, 9): 4.13,(13,10): 3.99,(13,11): 4.89,(13,12): 4.56,(13,13): 5.72
        }
        
        colvert_dealer = {
            (1, 1): 5.4, (1, 2): 4.1, (1, 3): 4.4, (1, 4): 5.4, (1, 5): 5.5, (1, 6): 3.8, (1, 7): 3.8, (1, 8): 3.8, (1, 9): 3.4, (1, 10): 3.4, (1, 11): 3.7, (1, 12): 3.4, (1, 13): 3.4,
            (2, 1): 4.1, (2, 2): 5.7, (2, 3): 6.9, (2, 4): 4.4, (2, 5): 5.4, (2, 6): 3.8, (2, 7): 3.8, (2, 8): 3.6, (2, 9): 3.7, (2, 10): 3.5, (2, 11): 3.8, (2, 12): 3.5, (2, 13): 3.5,    
            (3, 1): 4.4, (3, 2): 6.9, (3, 3): 5.9, (3, 4): 4.7, (3, 5): 5.9, (3, 6): 3.7, (3, 7): 3.7, (3, 8): 3.9, (3, 9): 3.7, (3, 10): 3.6, (3, 11): 3.8, (3, 12): 3.5, (3, 13): 3.5,    
            (4, 1): 5.4, (4, 2): 4.4, (4, 3): 4.7, (4, 4): 5.7, (4, 5): 6.4, (4, 6): 3.8, (4, 7): 3.8, (4, 8): 3.8, (4, 9): 3.7, (4, 10): 3.6, (4, 11): 3.8, (4, 12): 3.5, (4, 13): 3.5,    
            (5, 1): 5.5, (5, 2): 5.4, (5, 3): 5.9, (5, 4): 6.4, (5, 5): 8.6, (5, 6): 6.5, (5, 7): 6.0, (5, 8): 5.4, (5, 9): 5.4, (5, 10): 6.6, (5, 11): 6.9, (5, 12): 6.6, (5, 13): 6.6,    
            (6, 1): 3.8, (6, 2): 3.8, (6, 3): 3.7, (6, 4): 3.8, (6, 5): 6.5, (6, 6): 5.8, (6, 7): 4.8, (6, 8): 4.5, (6, 9): 5.2, (6, 10): 3.1, (6, 11): 3.4, (6, 12): 3.1, (6, 13): 3.1,    
            (7, 1): 3.8, (7, 2): 3.8, (7, 3): 3.7, (7, 4): 3.8, (7, 5): 6.0, (7, 6): 4.8, (7, 7): 5.9, (7, 8): 6.6, (7, 9): 4.0, (7, 10): 3.1, (7, 11): 3.5, (7, 12): 3.2, (7, 13): 3.2,    
            (8, 1): 3.8, (8, 2): 3.6, (8, 3): 3.9, (8, 4): 3.8, (8, 5): 5.4, (8, 6): 4.5, (8, 7): 6.6, (8, 8): 5.4, (8, 9): 4.6, (8, 10): 3.8, (8, 11): 3.4, (8, 12): 3.2, (8, 13): 3.2,    
            (9, 1): 3.4, (9, 2): 3.7, (9, 3): 3.7, (9, 4): 3.7, (9, 5): 5.4, (9, 6): 5.2, (9, 7): 4.0, (9, 8): 4.6, (9, 9): 5.2, (9, 10): 4.2, (9, 11): 3.9, (9, 12): 3.0, (9, 13): 3.1,    
            (10, 1): 3.4, (10, 2): 3.5, (10, 3): 3.6, (10, 4): 3.6, (10, 5): 6.6, (10, 6): 3.1, (10, 7): 3.1, (10, 8): 3.8, (10, 9): 4.2, (10, 10): 4.8, (10, 11): 4.5, (10, 12): 3.4, (10, 13): 2.8,    
            (11, 1): 3.7, (11, 2): 3.8, (11, 3): 3.8, (11, 4): 3.8, (11, 5): 6.9, (11, 6): 3.4, (11, 7): 3.5, (11, 8): 3.4, (11, 9): 3.9, (11, 10): 4.5, (11, 11): 5.3, (11, 12): 4.7, (11, 13): 3.9,    
            (12, 1): 3.4, (12, 2): 3.5, (12, 3): 3.5, (12, 4): 3.5, (12, 5): 6.6, (12, 6): 3.1, (12, 7): 3.2, (12, 8): 3.2, (12, 9): 3.0, (12, 10): 3.4, (12, 11): 4.7, (12, 12): 4.8, (12, 13): 3.4,    
            (13, 1): 3.4, (13, 2): 3.5, (13, 3): 3.5, (13, 4): 3.5, (13, 5): 6.6, (13, 6): 3.1, (13, 7): 3.2, (13, 8): 3.2, (13, 9): 3.1, (13, 10): 2.8, (13, 11): 3.9, (13, 12): 3.4, (13, 13): 4.8,
        }
        
        colvert_pone = {
            (1, 1): 6.2,(1, 2): 5.0,(1, 3): 5.1,(1, 4): 5.7,(1, 5): 6.0,(1, 6): 4.9,(1, 7): 4.9,(1, 8): 4.8,(1, 9): 4.6,(1,10): 4.4,(1,11): 4.7,(1,12): 4.4,(1,13): 4.3,
            (2, 1): 5.0,(2, 2): 6.4,(2, 3): 7.3,(2, 4): 5.3,(2, 5): 6.1,(2, 6): 5.0,(2, 7): 5.0,(2, 8): 4.9,(2, 9): 4.8,(2,10): 4.6,(2,11): 4.8,(2,12): 4.5,(2,13): 4.4,
            (3, 1): 5.1,(3, 2): 7.3,(3, 3): 6.8,(3, 4): 5.9,(3, 5): 6.7,(3, 6): 4.9,(3, 7): 5.0,(3, 8): 5.0,(3, 9): 4.8,(3,10): 4.6,(3,11): 4.9,(3,12): 4.5,(3,13): 4.4,
            (4, 1): 5.7,(4, 2): 5.3,(4, 3): 5.9,(4, 4): 6.6,(4, 5): 7.2,(4, 6): 5.3,(4, 7): 4.8,(4, 8): 4.9,(4, 9): 4.7,(4,10): 4.5,(4,11): 4.7,(4,12): 4.4,(4,13): 4.3,
            (5, 1): 6.0,(5, 2): 6.1,(5, 3): 6.7,(5, 4): 7.2,(5, 5): 9.3,(5, 6): 7.4,(5, 7): 6.9,(5, 8): 6.2,(5, 9): 6.1,(5,10): 7.4,(5,11): 7.6,(5,12): 7.3,(5,13): 7.2,
            (6, 1): 4.9,(6, 2): 5.0,(6, 3): 4.9,(6, 4): 5.3,(6, 5): 7.4,(6, 6): 7.0,(6, 7): 6.4,(6, 8): 5.7,(6, 9): 6.3,(6,10): 4.3,(6,11): 4.5,(6,12): 4.2,(6,13): 4.1,
            (7, 1): 4.9,(7, 2): 5.0,(7, 3): 5.0,(7, 4): 4.8,(7, 5): 6.9,(7, 6): 6.4,(7, 7): 7.1,(7, 8): 7.8,(7, 9): 5.2,(7,10): 4.3,(7,11): 4.7,(7,12): 4.3,(7,13): 4.2,
            (8, 1): 4.8,(8, 2): 4.9,(8, 3): 5.0,(8, 4): 4.9,(8, 5): 6.2,(8, 6): 5.7,(8, 7): 7.8,(8, 8): 6.6,(8, 9): 5.7,(8,10): 4.9,(8,11): 4.6,(8,12): 4.3,(8,13): 4.2,
            (9, 1): 4.6,(9, 2): 4.8,(9, 3): 4.8,(9, 4): 4.7,(9, 5): 6.1,(9, 6): 6.3,(9, 7): 5.2,(9, 8): 5.7,(9, 9): 6.3,(9,10): 5.4,(9,11): 5.0,(9,12): 4.1,(9,13): 4.0,
            (10, 1): 4.4,(10, 2): 4.6,(10, 3): 4.6,(10, 4): 4.5,(10, 5): 7.4,(10, 6): 4.3,(10, 7): 4.3,(10, 8): 4.9,(10, 9): 5.4,(10,10): 6.0,(10,11): 5.4,(10,12): 4.5,(10,13): 3.8,
            (11, 1): 4.7,(11, 2): 4.8,(11, 3): 4.9,(11, 4): 4.7,(11, 5): 7.6,(11, 6): 4.5,(11, 7): 4.7,(11, 8): 4.6,(11, 9): 5.0,(11,10): 5.4,(11,11): 6.5,(11,12): 5.4,(11,13): 4.7,
            (12, 1): 4.4,(12, 2): 4.5,(12, 3): 4.5,(12, 4): 4.4,(12, 5): 7.3,(12, 6): 4.2,(12, 7): 4.3,(12, 8): 4.3,(12, 9): 4.1,(12,10): 4.5,(12,11): 5.4,(12,12): 5.8,(12,13): 5.4,
            (13, 1): 4.3,(13, 2): 4.4,(13, 3): 4.4,(13, 4): 4.3,(13, 5): 7.2,(13, 6): 4.1,(13, 7): 4.2,(13, 8): 4.2,(13, 9): 4.0,(13,10): 3.8,(13,11): 4.7,(13,12): 4.4,(13,13): 5.6
        }

        rasmussen_dealer = {
            (1, 1): 5.51, (1, 2): 4.35, (1, 3): 4.69, (1, 4): 5.42, (1, 5): 5.38, (1, 6): 3.98, (1, 7): 4.05, (1, 8): 3.77, (1, 9): 3.49, (1, 10): 3.51, (1, 11): 3.57, (1, 12): 3.50, (1, 13): 3.36,    
            (2, 1): 4.35, (2, 2): 5.82, (2, 3): 7.14, (2, 4): 4.64, (2, 5): 5.54, (2, 6): 4.15, (2, 7): 3.78, (2, 8): 3.82, (2, 9): 3.91, (2, 10): 3.71, (2, 11): 4.05, (2, 12): 3.86, (2, 13): 3.57,
            (3, 1): 4.69, (3, 2): 7.13, (3, 3): 6.08, (3, 4): 5.13, (3, 5): 5.97, (3, 6): 4.05, (3, 7): 3.33, (3, 8): 4.13, (3, 9): 4.09, (3, 10): 3.51, (3, 11): 4.07, (3, 12): 3.65, (3, 13): 3.89,    
            (4, 1): 5.41, (4, 2): 4.63, (4, 3): 5.12, (4, 4): 5.54, (4, 5): 6.53, (4, 6): 3.95, (4, 7): 3.61, (4, 8): 3.77, (4, 9): 3.82, (4, 10): 3.60, (4, 11): 3.98, (4, 12): 3.63, (4, 13): 3.61,
            (5, 1): 5.38, (5, 2): 5.53, (5, 3): 5.97, (5, 4): 6.53, (5, 5): 8.88, (5, 6): 6.81, (5, 7): 6.01, (5, 8): 5.56, (5, 9): 5.43, (5, 10): 6.70, (5, 11): 7.09, (5, 12): 6.59, (5, 13): 6.73,    
            (6, 1): 3.97, (6, 2): 4.15, (6, 3): 4.05, (6, 4): 3.95, (6, 5): 6.80, (6, 6): 5.76, (6, 7): 5.14, (6, 8): 4.63, (6, 9): 5.11, (6, 10): 3.31, (6, 11): 3.45, (6, 12): 3.73, (6, 13): 3.21,    
            (7, 1): 4.05, (7, 2): 3.77, (7, 3): 3.33, (7, 4): 3.61, (7, 5): 6.00, (7, 6): 5.14, (7, 7): 5.87, (7, 8): 6.44, (7, 9): 4.06, (7, 10): 3.59, (7, 11): 3.83, (7, 12): 3.39, (7, 13): 3.47,    
            (8, 1): 3.76, (8, 2): 3.82, (8, 3): 4.13, (8, 4): 3.77, (8, 5): 5.56, (8, 6): 4.63, (8, 7): 6.44, (8, 8): 5.50, (8, 9): 4.77, (8, 10): 3.72, (8, 11): 3.93, (8, 12): 3.19, (8, 13): 3.04,    
            (9, 1): 3.49, (9, 2): 3.90, (9, 3): 4.08, (9, 4): 3.82, (9, 5): 5.43, (9, 6): 5.11, (9, 7): 4.06, (9, 8): 4.76, (9, 9): 5.21, (9, 10): 4.40, (9, 11): 4.01, (9, 12): 2.99, (9, 13): 3.07,    
            (10, 1): 3.50, (10, 2): 3.71, (10, 3): 3.51, (10, 4): 3.60, (10, 5): 6.69, (10, 6): 3.31, (10, 7): 3.59, (10, 8): 3.72, (10, 9): 4.39, (10, 10): 4.72, (10, 11): 4.76, (10, 12): 3.17, (10, 13): 2.84,    
            (11, 1): 3.56, (11, 2): 4.05, (11, 3): 4.06, (11, 4): 3.98, (11, 5): 7.08, (11, 6): 3.45, (11, 7): 3.83, (11, 8): 3.92, (11, 9): 4.01, (11, 10): 4.75, (11, 11): 5.28, (11, 12): 4.83, (11, 13): 3.92,    
            (12, 1): 3.50, (12, 2): 3.85, (12, 3): 3.64, (12, 4): 3.63, (12, 5): 6.59, (12, 6): 3.73, (12, 7): 3.38, (12, 8): 3.19, (12, 9): 2.99, (12, 10): 3.16, (12, 11): 4.82, (12, 12): 4.93, (12, 13): 3.48,
            (13, 1): 3.36, (13, 2): 3.56, (13, 3): 3.89, (13, 4): 3.61, (13, 5): 6.72, (13, 6): 3.20, (13, 7): 3.46, (13, 8): 3.04, (13, 9): 3.07, (13, 10): 2.83, (13, 11): 3.92, (13, 12): 3.48, (13, 13): 4.30,    
        }

        rasmussen_pone = {
            (1, 1): 5.59,(1, 2): 5.17,(1, 3): 4.96,(1, 4): 5.62,(1, 5): 5.81,(1, 6): 4.97,(1, 7): 4.81,(1, 8): 4.84,(1, 9): 4.34,(1,10): 4.54,(1,11): 4.64,(1,12): 4.24,(1,13): 4.33,
            (2, 1): 5.17,(2, 2): 6.19,(2, 3): 7.52,(2, 4): 5.21,(2, 5): 5.79,(2, 6): 4.79,(2, 7): 4.80,(2, 8): 4.90,(2, 9): 4.57,(2,10): 4.54,(2,11): 4.61,(2,12): 4.58,(2,13): 4.45,
            (3, 1): 4.95,(3, 2): 7.52,(3, 3): 6.11,(3, 4): 5.74,(3, 5): 6.72,(3, 6): 4.81,(3, 7): 4.85,(3, 8): 5.20,(3, 9): 5.18,(3,10): 4.58,(3,11): 4.71,(3,12): 4.61,(3,13): 4.43,
            (4, 1): 5.61,(4, 2): 5.20,(4, 3): 5.74,(4, 4): 6.00,(4, 5): 6.44,(4, 6): 5.06,(4, 7): 5.00,(4, 8): 4.94,(4, 9): 4.57,(4,10): 4.58,(4,11): 5.14,(4,12): 4.50,(4,13): 4.36,
            (5, 1): 5.81,(5, 2): 5.79,(5, 3): 6.72,(5, 4): 6.43,(5, 5): 9.09,(5, 6): 6.87,(5, 7): 7.08,(5, 8): 6.39,(5, 9): 6.06,(5,10): 7.22,(5,11): 8.14,(5,12): 7.10,(5,13): 7.13,
            (6, 1): 4.96,(6, 2): 4.79,(6, 3): 4.81,(6, 4): 5.05,(6, 5): 6.86,(6, 6): 6.30,(6, 7): 6.18,(6, 8): 5.86,(6, 9): 6.20,(6,10): 4.22,(6,11): 4.53,(6,12): 4.14,(6,13): 4.08,
            (7, 1): 4.81,(7, 2): 4.80,(7, 3): 4.84,(7, 4): 4.99,(7, 5): 7.08,(7, 6): 6.17,(7, 7): 6.93,(7, 8): 6.67,(7, 9): 5.10,(7,10): 4.17,(7,11): 4.69,(7,12): 4.24,(7,13): 4.25,
            (8, 1): 4.84,(8, 2): 4.90,(8, 3): 5.19,(8, 4): 4.93,(8, 5): 6.39,(8, 6): 5.86,(8, 7): 6.67,(8, 8): 7.91,(8, 9): 5.89,(8,10): 5.59,(8,11): 4.58,(8,12): 4.30,(8,13): 4.15,
            (9, 1): 4.33,(9, 2): 4.57,(9, 3): 5.17,(9, 4): 4.57,(9, 5): 6.06,(9, 6): 6.20,(9, 7): 5.10,(9, 8): 5.89,(9, 9): 6.52,(9,10): 5.30,(9,11): 4.86,(9,12): 4.12,(9,13): 4.94,
            (10, 1): 4.54,(10, 2): 4.53,(10, 3): 4.57,(10, 4): 4.57,(10, 5): 7.21,(10, 6): 4.22,(10, 7): 4.17,(10, 8): 5.58,(10,9): 5.29,(10,10): 6.19,(10,11): 5.95,(10,12): 4.64,(10,13): 3.85,
            (11, 1): 4.64,(11, 2): 4.61,(11, 3): 4.70,(11, 4): 5.14,(11, 5): 8.13,(11, 6): 4.53,(11, 7): 4.69,(11, 8): 4.57,(11, 9): 4.86,(11,10): 5.95,(11,11): 5.64,(11,12): 5.46,(11,13): 4.63,
            (12, 1): 4.23,(12, 2): 4.57,(12, 3): 4.61,(12, 4): 4.50,(12, 5): 7.10,(12, 6): 4.14,(12, 7): 4.24,(12, 8): 4.29,(12, 9): 4.11,(12,10): 4.63,(12,11): 5.46,(12,12): 5.36,(12,13): 4.52,
            (13, 1): 4.33,(13, 2): 4.45,(13, 3): 4.43,(13, 4): 4.36,(13, 5): 7.12,(13, 6): 4.07,(13, 7): 4.24,(13, 8): 4.15,(13, 9): 3.93,(13,10): 3.84,(13,11): 4.62,(13,12): 4.51,(13,13): 5.59
        }

        schell_dealer = {
            (1, 1): 5.38, (1, 2): 4.23, (1, 3): 4.52, (1, 4): 5.43, (1, 5): 5.45, (1, 6): 3.85, (1, 7): 3.85, (1, 8): 3.80, (1, 9): 3.40, (1, 10): 3.42, (1, 11): 3.65, (1, 12): 3.42, (1, 13): 3.41,    
            (2, 1): 4.23, (2, 2): 5.72, (2, 3): 7.00, (2, 4): 4.52, (2, 5): 5.45, (2, 6): 3.93, (2, 7): 3.81, (2, 8): 3.66, (2, 9): 3.71, (2, 10): 3.55, (2, 11): 3.84, (2, 12): 3.58, (2, 13): 3.52,    
            (3, 1): 4.52, (3, 2): 7.00, (3, 3): 5.94, (3, 4): 4.91, (3, 5): 5.97, (3, 6): 3.81, (3, 7): 3.58, (3, 8): 3.92, (3, 9): 3.78, (3, 10): 3.57, (3, 11): 3.90, (3, 12): 3.59, (3, 13): 3.67,    
            (4, 1): 5.43, (4, 2): 4.52, (4, 3): 4.91, (4, 4): 5.63, (4, 5): 6.48, (4, 6): 3.85, (4, 7): 3.72, (4, 8): 3.83, (4, 9): 3.72, (4, 10): 3.59, (4, 11): 3.88, (4, 12): 3.59, (4, 13): 3.60,    
            (5, 1): 5.45, (5, 2): 5.45, (5, 3): 5.97, (5, 4): 6.48, (5, 5): 8.79, (5, 6): 6.63, (5, 7): 6.01, (5, 8): 5.48, (5, 9): 5.43, (5, 10): 6.66, (5, 11): 7.00, (5, 12): 6.63, (5, 13): 6.66,    
            (6, 1): 3.85, (6, 2): 3.93, (6, 3): 3.81, (6, 4): 3.85, (6, 5): 6.63, (6, 6): 5.76, (6, 7): 4.98, (6, 8): 4.63, (6, 9): 5.13, (6, 10): 3.17, (6, 11): 3.41, (6, 12): 3.23, (6, 13): 3.13,    
            (7, 1): 3.85, (7, 2): 3.81, (7, 3): 3.58, (7, 4): 3.72, (7, 5): 6.01, (7, 6): 4.98, (7, 7): 5.92, (7, 8): 6.53, (7, 9): 4.04, (7, 10): 3.23, (7, 11): 3.53, (7, 12): 3.23, (7, 13): 3.26,    
            (8, 1): 3.80, (8, 2): 3.66, (8, 3): 3.92, (8, 4): 3.83, (8, 5): 5.48, (8, 6): 4.63, (8, 7): 6.53, (8, 8): 5.45, (8, 9): 4.72, (8, 10): 3.80, (8, 11): 3.52, (8, 12): 3.19, (8, 13): 3.16,    
            (9, 1): 3.40, (9, 2): 3.71, (9, 3): 3.78, (9, 4): 3.72, (9, 5): 5.43, (9, 6): 5.13, (9, 7): 4.04, (9, 8): 4.72, (9, 9): 5.16, (9, 10): 4.29, (9, 11): 3.97, (9, 12): 2.99, (9, 13): 3.06,    
            (10, 1): 3.42, (10, 2): 3.55, (10, 3): 3.57, (10, 4): 3.59, (10, 5): 6.66, (10, 6): 3.17, (10, 7): 3.23, (10, 8): 3.80, (10, 9): 4.29, (10, 10): 4.76, (10, 11): 4.61, (10, 12): 3.31, (10, 13): 2.84,    
            (11, 1): 3.65, (11, 2): 3.84, (11, 3): 3.90, (11, 4): 3.88, (11, 5): 7.00, (11, 6): 3.41, (11, 7): 3.53, (11, 8): 3.52, (11, 9): 3.97, (11, 10): 4.61, (11, 11): 5.33, (11, 12): 4.81, (11, 13): 3.96,    
            (12, 1): 3.42, (12, 2): 3.58, (12, 3): 3.59, (12, 4): 3.59, (12, 5): 6.63, (12, 6): 3.23, (12, 7): 3.23, (12, 8): 3.19, (12, 9): 2.99, (12, 10): 3.31, (12, 11): 4.81, (12, 12): 4.79, (12, 13): 3.46,    
            (13, 1): 3.41, (13, 2): 3.52, (13, 3): 3.67, (13, 4): 3.60, (13, 5): 6.66, (13, 6): 3.13, (13, 7): 3.26, (13, 8): 3.16, (13, 9): 3.06, (13, 10): 2.84, (13, 11): 3.96, (13, 12): 3.46, (13, 13): 4.58,
        }

        schell_pone = {
            (1, 1): 6.02, (1, 2): 5.07, (1, 3): 5.07, (1, 4): 5.72, (1, 5): 6.01, (1, 6): 4.91, (1, 7): 4.89, (1, 8): 4.85, (1, 9): 4.55, (1, 10): 4.48, (1, 11): 4.68, (1, 12): 4.33, (1, 13): 4.30,    
            (2, 1): 5.07, (2, 2): 6.38, (2, 3): 7.33, (2, 4): 5.33, (2, 5): 6.11, (2, 6): 4.97, (2, 7): 4.97, (2, 8): 4.94, (2, 9): 4.70, (2, 10): 4.59, (2, 11): 4.81, (2, 12): 4.56, (2, 13): 4.45,    
            (3, 1): 5.07, (3, 2): 7.33, (3, 3): 6.68, (3, 4): 5.96, (3, 5): 6.78, (3, 6): 4.87, (3, 7): 5.01, (3, 8): 5.05, (3, 9): 4.87, (3, 10): 4.63, (3, 11): 4.86, (3, 12): 4.59, (3, 13): 4.48,    
            (4, 1): 5.72, (4, 2): 5.33, (4, 3): 5.96, (4, 4): 6.53, (4, 5): 7.26, (4, 6): 5.34, (4, 7): 4.88, (4, 8): 4.94, (4, 9): 4.68, (4, 10): 4.53, (4, 11): 4.85, (4, 12): 4.46, (4, 13): 4.36,    
            (5, 1): 6.01, (5, 2): 6.11, (5, 3): 6.78, (5, 4): 7.26, (5, 5): 9.37, (5, 6): 7.47, (5, 7): 7.00, (5, 8): 6.30, (5, 9): 6.15, (5, 10): 7.41, (5, 11): 7.76, (5, 12): 7.34, (5, 13): 7.25,    
            (6, 1): 4.91, (6, 2): 4.97, (6, 3): 4.87, (6, 4): 5.34, (6, 5): 7.47, (6, 6): 7.08, (6, 7): 6.42, (6, 8): 5.86, (6, 9): 6.26, (6, 10): 4.31, (6, 11): 4.57, (6, 12): 4.22, (6, 13): 4.14,    
            (7, 1): 4.89, (7, 2): 4.97, (7, 3): 5.01, (7, 4): 4.88, (7, 5): 7.00, (7, 6): 6.42, (7, 7): 7.14, (7, 8): 7.63, (7, 9): 5.26, (7, 10): 4.31, (7, 11): 4.68, (7, 12): 4.32, (7, 13): 4.27,    
            (8, 1): 4.85, (8, 2): 4.94, (8, 3): 5.05, (8, 4): 4.94, (8, 5): 6.30, (8, 6): 5.86, (8, 7): 7.63, (8, 8): 6.82, (8, 9): 5.83, (8, 10): 5.10, (8, 11): 4.59, (8, 12): 4.31, (8, 13): 4.20,    
            (9, 1): 4.55, (9, 2): 4.70, (9, 3): 4.87, (9, 4): 4.68, (9, 5): 6.15, (9, 6): 6.26, (9, 7): 5.26, (9, 8): 5.83, (9, 9): 6.39, (9, 10): 5.43, (9, 11): 4.96, (9, 12): 4.11, (9, 13): 4.03,    
            (10, 1): 4.48, (10, 2): 4.59, (10, 3): 4.63, (10, 4): 4.53, (10, 5): 7.41, (10, 6): 4.31, (10, 7): 4.31, (10, 8): 5.10, (10, 9): 5.43, (10, 10): 6.08, (10, 11): 5.63, (10, 12): 4.61, (10, 13): 3.88,    
            (11, 1): 4.68, (11, 2): 4.81, (11, 3): 4.86, (11, 4): 4.85, (11, 5): 7.76, (11, 6): 4.57, (11, 7): 4.68, (11, 8): 4.59, (11, 9): 4.96, (11, 10): 5.63, (11, 11): 6.42, (11, 12): 5.46, (11, 13): 4.77,    
            (12, 1): 4.33, (12, 2): 4.56, (12, 3): 4.59, (12, 4): 4.46, (12, 5): 7.34, (12, 6): 4.22, (12, 7): 4.32, (12, 8): 4.31, (12, 9): 4.11, (12, 10): 4.61, (12, 11): 5.46, (12, 12): 5.79, (12, 13): 4.49,    
            (13, 1): 4.30, (13, 2): 4.45, (13, 3): 4.48, (13, 4): 4.36, (13, 5): 7.25, (13, 6): 4.14, (13, 7): 4.27, (13, 8): 4.20, (13, 9): 4.03, (13, 10): 3.88, (13, 11): 4.77, (13, 12): 4.49, (13, 13): 5.65,
        }

        keys = (discard[0].rank['value'], discard[1].rank['value'])
        # print("discard: " + str(discard)  + " keys: " + str(keys) + " value: " + str(rasmussen_dealer.get(keys)))
        if is_crib:
            return rasmussen_dealer.get(keys)
        else:
            return rasmussen_pone.get(keys)

    def tri_graph(self, hand, crib_permus, probs_tops, score_aves, score_tops):
    
        fig = plt.figure()
        
        # syntax for 3-D projection
        ax = fig.add_subplot(131,projection ='3d')
        
        # defining all 3 axis
        x=[0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5]
        y=[1,2,3,4,5,0,2,3,4,5,0,1,3,4,5,0,1,2,4,5,0,1,2,3,5,0,1,2,3,4]
        # z = score_tops
        z=np.zeros(len(score_tops))


        # plotting
        dx=np.ones(len(crib_permus))
        dy=np.ones(len(crib_permus))
        dz=np.ones(len(score_tops))*score_tops

        ax.bar3d(x, y, z,dx,dy,dz)
        ax.set_title('3D plot of Top Scores')

        ax.set_xlabel('1st card')
        ax.set_xticks([0.5,1.5,2.5,3.5,4.5,5.5])
        x_tick_labels = []
        for i in range(len(hand)):
            x_tick_labels.append(hand[i].__str__())
        ax.set_xticklabels(x_tick_labels)

        ax.set_ylabel('2nd card')
        ax.set_yticks([0.5,1.5,2.5,3.5,4.5,5.5])
        y_tick_labels = []
        for j in range(len(hand)):
            y_tick_labels.append(hand[j].__str__())
        ax.set_yticklabels(y_tick_labels)

        ax.set_zlabel('Hand Points')

        ax = fig.add_subplot(132,projection ='3d')
        z=np.zeros(len(score_aves))

        # plotting
        dx=np.ones(len(crib_permus))
        dy=np.ones(len(crib_permus))
        dz=np.ones(len(score_aves))*score_aves

        ax.bar3d(x, y, z,dx,dy,dz)
        ax.set_title('3D plot of Average Scores')

        ax.set_xlabel('1st card')
        ax.set_xticks([0.5,1.5,2.5,3.5,4.5,5.5])
        x_tick_labels = []
        for i in range(len(hand)):
            x_tick_labels.append(hand[i].__str__())
        ax.set_xticklabels(x_tick_labels)

        ax.set_ylabel('2nd card')
        ax.set_yticks([0.5,1.5,2.5,3.5,4.5,5.5])
        y_tick_labels = []
        for j in range(len(hand)):
            y_tick_labels.append(hand[j].__str__())
        ax.set_yticklabels(y_tick_labels)

        ax.set_zlabel('Hand Points')

        ax = fig.add_subplot(133,projection ='3d')
        z=np.zeros(len(probs_tops))

        # plotting
        dx=np.ones(len(crib_permus))
        dy=np.ones(len(crib_permus))
        dz=np.ones(len(probs_tops))*probs_tops

        ax.bar3d(x, y, z,dx,dy,dz)
        ax.set_title('3D plot of Most Likely Scores')

        ax.set_xlabel('1st card')
        ax.set_xticks([0.5,1.5,2.5,3.5,4.5,5.5])
        x_tick_labels = []
        for i in range(len(hand)):
            x_tick_labels.append(hand[i].__str__())
        ax.set_xticklabels(x_tick_labels)

        ax.set_ylabel('2nd card')
        ax.set_yticks([0.5,1.5,2.5,3.5,4.5,5.5])
        y_tick_labels = []
        for j in range(len(hand)):
            y_tick_labels.append(hand[j].__str__())
        ax.set_yticklabels(y_tick_labels)

        ax.set_zlabel('Hand Points')
        plt.show()
    
    def discard_analysis(self, hand, is_crib):
        
        # deck = self.deck_without_hand(hand)
        crib_permus = list(permutations(hand,2))

        probs_book = []
        score_book = []
        score_aves = []
        chamb_aves = []
        score_tops = []
        probs_tops = []

        top_hand = []
        top_score = 0
        
        for i in range(len(crib_permus)):

            deck = self.deck_without_hand(hand)
            
            hand.remove(crib_permus[i][0])
            hand.remove(crib_permus[i][1])
            
            crib_score = self.find_expected_crib_score(crib_permus[i],is_crib)

            score_list = []
            chamber_score_list = []
            count_list = []
            temp_top_score = 0

            
            while deck.cards:
                draw = deck.draw()
                
                score = self.score_hand(hand, draw, is_crib)
                score_list.append(score)
                # print("hand: " + str(hand) + "draw: " + str(draw), "score: " + str(score))

                chamber_score = self.score_hand(list(crib_permus[i]), draw, is_crib)
                chamber_score_list.append(chamber_score)
                # print("crib: " + str(crib_permus[i]) + "draw: " + str(draw), "score: " + str(chamber_score))

                if score > temp_top_score:
                    temp_top_score = score

                if score > top_score:
                    top_score = score
                    top_hand = crib_permus[i]

            temp_top_count_score = 0
            temp_top_count = 0

            for j in range(len(score_list)):
                score = score_list[j]
                score_count = score_list.count(score)
                # print(str(crib_permus[i]) + ": score:" + str(score_list[j]) + "count:" + str(score_count))

                # find score most often scored, bias for higher score if tie
                if score_count >= temp_top_count and score >= temp_top_count_score:
                    temp_top_count = score_count
                    temp_top_count_score = score

                # attach times-score-was-scored to list
                count_list.append(score_count)

            probs_book.append(count_list)
            score_book.append(score_list)
            probs_tops.append(temp_top_count_score)
            score_tops.append(temp_top_score)
            score_aves.append(np.mean(score_list))
            chamb_aves.append(np.mean(chamber_score_list))

            # goes at end, do calcs first, then put cards back
            hand.append(crib_permus[i][0])
            hand.append(crib_permus[i][1])

        # print("self: " + str(self.__repr__()))
        self.tri_graph(hand, crib_permus, probs_tops, score_aves, score_tops)

    def select_crib_cards(self, hand, dealer):

        # dealer check
        if str(dealer) == self.__repr__():
            is_crib = True
        else:
            is_crib = False
        
        self.discard_analysis(hand, is_crib)
        # play_hand = self._get_priori(hand)
            
        # print(play_hand)        
        return play_hand

    def select_card_to_play(self, hand, table, crib):
        return random.choice(hand)
    
class HumanPlayer(Player):
    """Interface for a human user to play."""

    def present_cards_for_selection(self, cards, n_cards=1):
        """Presents a text-based representation of the game via stdout and prompts a human user for decisions.

        :param cards: list of cards in player's hand
        :param n_cards: number of cards that player must select
        :return: list of n_cards cards selected from player's hand
        """
        cards_selected = []
        while len(cards_selected) < n_cards:
            s = ""
            for idx, card in enumerate(cards):
                s += "(" + str(idx + 1) + ") " + str(card)
                if card != cards[-1]:
                    s += ","
                s += " "
            msg = "Select a card: " if n_cards == 1 else "Select %d cards: " % n_cards
            print(s)
            selection = input(msg)
            card_indices = [int(s) for s in selection.split() if s.isdigit()]
            for idx in card_indices:
                if idx < 1 or idx > len(cards):
                    print("%d is an invalid selection." % idx)
                else:
                    cards_selected.append(cards[idx-1])
        return cards_selected

    def select_crib_cards(self, hand, dealer):
        return self.present_cards_for_selection(cards=hand, n_cards=2)

    def select_card_to_play(self, hand, table, crib):
        return self.present_cards_for_selection(cards=hand, n_cards=1)[0]
